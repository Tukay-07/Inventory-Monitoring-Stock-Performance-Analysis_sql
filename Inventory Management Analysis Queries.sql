						---Inventory Performance & Stock Monitoring---

--Which products are currently below their reorder level in each store?
SELECT 
	i.product_id, 
	p.product_name,
	i.store_id,
	i.quantity_in_stock,
	p.reorder_level
FROM
	inventory i
JOIN
	products p
ON i.product_id = p.product_id
WHERE
 i.quantity_in_stock < p.reorder_level

 --What is the total stock value available in each store?
 SELECT
	i.store_id,
	SUM(i.quantity_in_stock * p.unit_price) AS Stock_Value
FROM inventory i
JOIN products p
ON i.product_id = p.product_id
GROUP BY i.store_id

--Which store has the lowest overall inventory value?

SELECT
	i.store_id,
	SUM(i.quantity_in_stock * p.unit_price) AS Stock_Value
FROM inventory i
JOIN products p
ON i.product_id = p.product_id
GROUP BY i.store_id
ORDER BY Stock_Value ASC

--List products with 0 stock in any store.

SELECT
	i.store_id,
	i.product_id,
	p.product_name,
	i.quantity_in_stock
FROM inventory i
JOIN products p
ON i.product_id = p.product_id
WHERE i.quantity_in_stock = 0

--What is the average quantity in stock per category?
SELECT
	p.category,
	AVG(quantity_in_stock) AS avg_quantity_in_stock
FROM inventory i
JOIN products p
ON i.product_id = p.product_id
GROUP BY p.category

--What is the most overstocked product (by quantity and by value)?

SELECT
 TOP 10
	p.product_name,
	SUM(i.quantity_in_stock) AS total_quantity_in_stock,
	SUM(i.quantity_in_stock * p.unit_price) AS product_value
FROM 
	inventory i
JOIN 
	products p
ON 
	i.product_id = p.product_id
GROUP BY
	p.product_name
ORDER BY
	total_quantity_in_stock DESC

--When was the inventory last updated for each store?

SELECT 
	store_id,
	MAX(last_updated) AS last_inventory_update
FROM
	inventory
GROUP BY
	store_id
ORDER BY 
	store_id

--What are the top 5 most sold products in the last 30 days?

SELECT	
	product_id,
	SUM(quantity_sold) AS total_quantity_sold
FROM
	sales
WHERE
	sale_date >= DATEADD(DAY,-30, GETDATE())
GROUP BY
	product_id
ORDER BY 
	product_id,total_quantity_sold DESC

--Which products have not been sold at all in the past 60 days?

SELECT
	p.product_id,p.product_name
FROM
	products p
LEFT JOIN
	sales s
ON 
	p.product_id = s.product_id
AND
	s.sale_date <= DATEADD(DAY,-60, GETDATE())
WHERE s.product_id IS NULL

---What is the total revenue generated by each product?

SELECT
	p.product_name,
	ROUND(SUM(s.quantity_sold * p.unit_price),2) AS total_revenue
FROM
	products p
JOIN 
	sales s 
ON
	p.product_id = s.product_id
GROUP BY
	p.product_name
ORDER BY
	total_revenue DESC

---What is the average number of units sold per product per store?

SELECT
    p.product_name,
    st.store_name,
    AVG(s.quantity_sold) AS avg_units_sold
FROM 
    products p
JOIN 
    sales s ON p.product_id = s.product_id
JOIN 
    stores st ON s.store_id = st.store_id
GROUP BY 
    p.product_name, st.store_name
ORDER BY 
    p.product_name, st.store_name;

---Which category generates the most revenue?

SELECT TOP 5
	p.category,
	ROUND(SUM(s.quantity_sold * p.unit_price),2) AS total_revenue
FROM
	products p
JOIN 
	sales s 
ON
	p.product_id = s.product_id
GROUP BY
	p.category
ORDER BY
	total_revenue DESC

---What is the monthly trend in product sales?

SELECT
    CAST(YEAR(sale_date) AS VARCHAR(4)) + '-' + RIGHT('0' + CAST(MONTH(sale_date) AS VARCHAR(2)), 2) AS month,
    SUM(quantity_sold) AS total_quantity_sold
FROM
    sales
GROUP BY
    YEAR(sale_date), MONTH(sale_date)
ORDER BY
    YEAR(sale_date), MONTH(sale_date);

-- How many unique products were sold in each store last month?

SELECT
    store_id,
    COUNT(DISTINCT product_id) AS unique_products_sold
FROM
    sales
WHERE
    sale_date >= DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()) - 1, 0)
    AND sale_date <  DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()), 0)
GROUP BY
    store_id
ORDER BY
    store_id;

-- Which suppliers provided the most stock (by quantity) in the last 3 months?

SELECT
	supplier_id,
	SUM(quantity_purchased) AS total_quantity_supplied
FROM
	purchases
WHERE 
	purchase_date >= DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()) -3,0)
	AND purchase_date < DATEADD(MONTH, DATEDIFF(MONTH, 0, GETDATE()),0)
GROUP BY
	supplier_id
ORDER BY
	total_quantity_supplied DESC

--- How many different products does each supplier provide?
SELECT
	supplier_id,
	COUNT (DISTINCT product_id) AS no_of_products
FROM purchases
GROUP BY supplier_id

-- Which supplier has the highest contribution to high-demand products?


